AWSTemplateFormatVersion: 2010-09-09
Description: >
  Taller AutoEstudio

Parameters:

  pVPCRango:
    Description: Rango de IP para mi VPC
    Type: String
    Default: 10.0.0.0/16 # Este es el rango de mi VPC

  prangosubnetpublica1:
    Description: Rango de IP para subnet publica1
    Type: String
    Default: 10.0.1.0/24

  pAMI:
    Description: Ami AutoEstudio Linux
    Type: AWS::EC2::Image::Id
    Default: ami-0cff7528ff583bf9a 

  pTipoDeInstancia: 
    Description: Tipo de instancia en la que se levanta mi AMI
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro


Resources:

  rMYVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref pVPCRango 
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default  # Instancia que comparte recursos, no es una instancia dedicada 
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "VPC" ]]

  rSubnetPublica1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref prangosubnetpublica1
      MapPublicIpOnLaunch: true
      VpcId: !Ref rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "Subnetpublica1" ]]

  rEc2chaostoolkit:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref rperfilRole
      ImageId: !Ref pAMI
      Monitoring: true
      InstanceType: !Ref pTipoDeInstancia
      SubnetId: !Ref rSubnetPublica1
      SecurityGroupIds:
        - !GetAtt rSecurityGroupEC2.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          systemctl restart amazon-ssm-agent
          cd /
          mkdir my-experiments && cd my-experiments
          python3 -m venv .venv && source .venv/bin/activate && python3 -m pip install --upgrade pip
          pip install -U pip3
          pip3 install -U chaostoolkit
          pip3 install -U chaostoolkit-kubernetes
          pip3 install -U chaostoolkit-aws
          pip3 install -U chaostoolkit-reporting
          pip3 install -U chaostoolkit-dynatrace
          sudo amazon-linux-extras install docker
          sudo amazon-linux-extras install epel
          curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
          sudo yum -y install nodejs
          sudo yum -y install cairo-devel
          sudo yum -y install pandoc --enablerepo=epel
          pip3 install -U jsonschema
          pip3 install -i https://test.pypi.org/simple/ chaosk8-stress-instances==0.2.7
          pip3 install -U chaostoolkit-lib[jsonpath]
          cd /

  rRoleIAM:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Rol que permite la conexion por SSM, a S3 y a cloudwatch 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
      RoleName: !Join ["-", [ Ref: "AWS::StackName" , "RoleEc2" ]]

  rperfilRole:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: Perfil-Role-EC2
      Roles: 
        - Ref: rRoleIAM
        

  rSecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group con reglas de entrada para las instancias EC2
      GroupName: SG EC2
      SecurityGroupIngress: 
        - IpProtocol: tcp
          Description: Conexion HTTP
          FromPort: 0 #Comienzo del rango de puertos
          ToPort: 80   # Fin del rango de puertos
          CidrIp: 0.0.0.0/0 #El intervalo de direcciones IPV4
      VpcId: !Ref rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SGec2" ]]

  rInternetGatway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "InternetGatway" ]]

  rAttachmentIG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref rInternetGatway
      VpcId: !Ref rMYVPC

  rRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "RouteTablePublic" ]]

  rSubnet1AsociationRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref rRouteTablePublic
      SubnetId: !Ref rSubnetPublica1

  rRoutePublic:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGatway
      RouteTableId: !Ref rRouteTablePublic


  rBucketS3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join ["-", [ Ref: "AWS::StackName" , "bucketwebmaik" ]]
      PublicAccessBlockConfiguration: 
          BlockPublicAcls: true
          BlockPublicPolicy: true 
          IgnorePublicAcls: true
          RestrictPublicBuckets: true